<?xml version="1.0" encoding="UTF-8"?>
<snippet>
    <content><![CDATA[
#Language PascalScript
{
  Use this script to create your own command that generates
  geometry based on multiple mouse clicks from the user.

  Change the constant below "MaxPoints" to be the number of
  clicks your command requires.  For example, if making a
  line command, it might be "2", for a 3-point arc command,
  it might be "3", and for a sketching tool it might be a
  big number like 10000.

  The points gathered from the user are stored in two parallel
  arrays, "XPoints" and "YPoints".
}

{Import some OMAX constants that we will need.}
uses '%OMAX_Library%OMAX_Constants.omaxscript';

const
  MaxPoints=10; //<<<<<---- Set this to the max clicks to allow for your tool
var
  XPoints:Array[0..MaxPoints] of Double;
  YPoints:Array[0..MaxPoints] of Double;
  NumClicks:Integer;

Procedure GenerateShape;
{
 Replace the code below with your own code to generate the
 Actual geometry.
}
var
   Index:Integer;
begin

 {<<<<<----- ADD YOUR OWN CODE BELOW ----->>>>>}

   For Index:=1 to NumClicks do
   begin
     OMAX_AddEntity(XPoints[Index-1],YPoints[Index-1],XPoints[Index],YPoints[Index],0);
   end;

 {<<<<<----- ADD YOUR OWN CODE ABOVE ----->>>>>}

end;

{Main code starts below, which you generally should not have
 to modify unless you want to get fancier than this template
 was meant for, or if you want to change the cursors used.}
var
   OriginalCount:Integer;          // so we know how many new elements are created.
   StartX,StartY,EndX,EndY:Double; // to store the coordinates of our shape.
   Index:Integer;                  // loop counter
   OldCADWidth,OldCADHeight,OldCADScale:Double; // to aid in redraws if user stretches screen.
   CancelCommand:Boolean;
begin

  {Memorize the screen, so we can draw on top of it,
   but then later recall this memorized screen to
   erase what we drew, and draw on top of it again.}
  OMAX_RedrawToBackgroundBuffer;
  OriginalCount:=OMAX_EntityCount;

  {Remember old mouse cursor.}
  OMAX_RememberCursor;

  {Prevent mouse from doing other things when user clicks.
   At this point we want to be in charge of mouse clicsk.}
  OMAX_ChangeActivityMode(amDoNothing); // Change it to be nothing.

  {Set mouse cursor for first click.}
  OMAX_SetCursor(crSnapFrom);//<<<<<----- Consider changing

  NumClicks:=0;

  {Wait for first click to establish first point of shape.}
  While OMAX_MouseButtonStatus=0 do
  begin
     Application.ProcessMessages;
     XPoints[0]:=OMAX_MouseCADX;
     YPoints[0]:=OMAX_MouseCADY;
  end;
  OMAX_WaitForMouseUp;

  CancelCommand:=False;
  While (NumClicks+1<MaxPoints) and (CancelCommand=False) do
  begin

    Inc(NumClicks);

    {Change cursor to let user know to click the next point}
    OMAX_SetCursor(crSnapTo); //<<<<<----- Consider changing

    {Draw shape with subsequent clicks.}
    While OMAX_MouseButtonStatus=0 do
    begin

      {Erase the elements we may have created as we were
       rubberbanding around from the users motions.}
      For Index:=OriginalCount+1 to OMAX_EntityCount do OMAX_E_SetEraseMeFlag(Index,True);
      OMAX_EraseFlaggedForErasure;

      {Allow input processing.}
      Application.ProcessMessages;

      {If user stretches screen, then we need to clear out and rememorize the
       background buffer so that it is at the new size.  Otherwise we end up
       with a bunch of ghosting..}
      if (OldCADWidth<>OMAX.Width) or (OldCADHeight<>OMAX.Height) or
         (OldCADScale<>OMAX_Scale) then
      begin
        OMAX_RedrawToBackgroundBuffer;
        OldCADWidth :=OMAX.Width;
        OldCADHeight:=OMAX.Height;
        OldCADScale :=OMAX_Scale;
      end;

      {Grab the next two coordinates for our shape.}
      XPoints[NumClicks]:=OMAX_MouseCADX;
      YPoints[NumClicks]:=OMAX_MouseCADY;

      {Generate the shape}
      GenerateShape;

      {Redraw the screen.
       Recall previously memorized buffer to the screen, and then draw
       a range of elements (The new elements we created) on top using
       the rubberband color scheme and fast redraw routines.}
      OMAX_RubberDrawRangeWithBuffer(OriginalCount+1,OMAX_EntityCount);

    end;

    {Make sure user does not still have mouse button down, so we don't end up "zooming"
     when Layout gets control back.}
    OMAX_WaitForMouseUp;

  end; // while

  {Once we are done, do a final redraw to clear up the rubberbands.}
  OMAX_Redraw;

  {Restore the mouse cursor back to previously memorized state.}
  OMAX_RestoreCursor;

end.
]]></content>
	<description>Many Click Draw Command Template</description>
    <tabTrigger>template_many_click_draw_command</tabTrigger>
    <scope>source.omaxscript</scope> 
</snippet>
