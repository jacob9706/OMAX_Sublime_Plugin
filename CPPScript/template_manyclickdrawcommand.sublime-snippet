<snippet>
	<description>Many Click Draw Command Template</description>
    <content><![CDATA[#language C++Script

/*
 * Use this script to create your own command that generates
 * geometry based on multiple mouse clicks from the user.
 *
 * Change the constant below "MAX_POINTS" to be the number of
 * clicks your command requires.  For example, if making a
 * line command, it might be "2", for a 3-point arc command,
 * it might be "3", and for a sketching tool it might be a
 * big number like 10000.
 *
 * The points gathered from the user are stored in two parallel
 * arrays, "xPoints" and "yPoints".
 */

/*Import some OMAX constants that we will need.*/
#include "%OMAX_Library%OMAX_Constants.omaxscript"

int MAX_POINTS = 10;

double arrayType;
double xPoints[MAX_POINTS];
double yPoints[MAX_POINTS];

void GenerateShape()
{
	for (int i=1; i < MAX_POINTS; i++)
	{
		OMAX_AddEntity(xPoints[i-1], yPoints[i-1], xPoints[i], yPoints[i], 0);
	}
}

//Main
{
	// Create the arrays
	xPoints = VarArrayCreate([0, MAX_POINTS-1], VarType(arrayType));
	yPoints = VarArrayCreate([0, MAX_POINTS-1], VarType(arrayType));

	// Memorize the screen, so we can draw on top of it,
	// but then later recall this memorized screen to
	// erase what we drew, and draw on top of it again.
	int originalCount = OMAX_EntityCount();
	OMAX_RedrawToBackgroundBuffer();

	// Remember old mouse cursor.
	OMAX_RememberCursor();

	// Prevent mouse from doing other things when user clicks.
	// At this point we want to be in charge of mouse clicks.
	OMAX_ChangeActivityMode(amDoNothing);

	// Set mouse cursor for first click.
	OMAX_SetCursor(crSnapFrom); //<<<<<----- Consider changing

	int numClicks = 0;

	// Wait for first click to establish first point of shape.
	while (OMAX_MouseButtonStatus == 0)
	{
		Application.ProcessMessages();
		xPoints[0] = OMAX_MouseCADX();
		yPoints[0] = OMAX_MouseCADY();
	}

	OMAX_WaitForMouseUp();

	bool cancelCommand = false;
	double oldCadWidth = 0, oldCadHeight = 0, oldCadScale = 0;

	while ((numClicks+1 < MAX_POINTS) && (cancelCommand == false))
	{
		numClicks++;

		// Change cursor to let the user know to click the next point
		OMAX_SetCursor(crSnapTo); //<<<<<----- Consider changing

		while (OMAX_MouseButtonStatus == 0)
		{
			// Erase the elements we may have created as we were
			// rubberbanding around from the users motions.
			for (int i = originalCount+1; i <= OMAX_EntityCount(); i++)
			{
				OMAX_E_SetEraseMeFlag(i, true);
			}

			OMAX_EraseFlaggedForErasure();

			// Allow input processing.
			Application.ProcessMessages();

			// If user stretches screen, then we need to clear out and rememorize the
			// background buffer so that it is at the new size.  Otherwise we end up
			// with a bunch of ghosting..
			if ((oldCadWidth != OMAX.Width()) || (oldCadHeight != OMAX.Height()) || (oldCadScale != OMAX_Scale()))
			{
				OMAX_RedrawToBackgroundBuffer(0);
				oldCadWidth = OMAX.Width();
				oldCadHeight = OMAX.Height();
				oldCadScale = OMAX_Scale();
			}

			xPoints[numClicks] = OMAX_MouseCADX();
			yPoints[numClicks] = OMAX_MouseCADY();

			GenerateShape();

			// Redraw the screen.
			// Recall previously memorized buffer to the screen, and then draw
			// a range of elements (The new elements we created) on top using
			// the rubberband color scheme and fast redraw routines.
			OMAX_RubberDrawRangeWithBuffer(originalCount+1, OMAX_EntityCount());
		}

		OMAX_WaitForMouseUp();
	}

	// Once we are done, do a final redraw to clear up the rubberbands.
	OMAX_Redraw();

	// Restore the mouse cursor back to previously memorized state.
	OMAX_RestoreCursor();
}

]]></content>
    <tabTrigger>template_manyclickdrawcommand</tabTrigger>
    <scope>source.omaxscriptc++</scope>
</snippet>
